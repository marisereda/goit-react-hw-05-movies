{"version":3,"file":"static/js/417.8dd085fb.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","utils/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Image = styled.img`\n  object-fit: cover;\n`;\n\nexport const ImageWrap = styled.div`\n  width: 300px;\n  height: 450px;\n  background-color: ${p => p.theme.colors.bgMain};\n  border-radius: ${p => p.theme.radii.textBlock};\n  margin-bottom: ${p => p.theme.space[3]}px;\n  overflow: hidden;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Box } from 'components/Box';\nimport Loader from 'components/Loader';\nimport { getMovieCast } from 'utils';\nimport { Image, ImageWrap } from './Cast.styled';\n\nconst STATUS = {\n  idle: 0,\n  pending: 1,\n  resolved: 2,\n  rejected: 3,\n};\n\nconst Cast = () => {\n  const BASE_URL = 'https://image.tmdb.org/t/p/w300';\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  // -------------------------------------------------\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    async function getCast() {\n      try {\n        setStatus(STATUS.pending);\n        const castInfo = await getMovieCast({ id: movieId, signal });\n        setCast(castInfo);\n        setStatus(STATUS.resolved);\n      } catch (error) {\n        setStatus(STATUS.rejected);\n        toast(error.message);\n      }\n    }\n    getCast();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  // -------------------------------------------------\n  if (!cast) {\n    return;\n  }\n\n  // -------------------------------------------------\n  return (\n    <Box borderRadius=\"textBlock\" backgroundColor=\"bgAccent\" padding={6}>\n      {status === STATUS.pending && <Loader />}\n      {cast.length === 0 ? (\n        <p>There is no cast.</p>\n      ) : (\n        <Box\n          display=\"grid\"\n          gridTemplateColumns=\"1fr 1fr 1fr\"\n          gridGap={5}\n          maxWidth=\"maxBox\"\n          as=\"ul\"\n        >\n          {cast.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              <ImageWrap>\n                <Image src={BASE_URL + profile_path} alt={name} />\n              </ImageWrap>\n              <h3>{name}</h3>\n              <p>\n                Character: <span>{character}</span>\n              </p>\n            </li>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { API_TOKEN, BASE_URL } from 'constants';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.headers.common['Authorization'] = `Bearer ${API_TOKEN}`;\n\n// -------------------------------------------------\nexport async function getMovieCast({ id, signal }) {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      signal,\n    });\n    if (!response) {\n      throw Error('We are sorry! There is no cast information about the movie');\n    }\n\n    return response.data.cast;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return null;\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getMovieDetails({ id, signal }) {\n  try {\n    const response = await axios.get(`movie/${id}`, { signal });\n    if (!response) {\n      throw Error(\n        'We are sorry! There is no detailed information about the movie'\n      );\n    }\n\n    return response.data;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return null;\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getMovies({ page = 1, search = '', signal }) {\n  let params = {\n    page: page,\n    query: search,\n  };\n\n  try {\n    const response = await axios.get('search/movie', { params, signal });\n    if (response.data.results.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return [];\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getReviews({ id, signal }) {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, { signal });\n    if (!response) {\n      throw Error('There is no cast information about the movie');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return null;\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getTrendingMovies({ signal, page = 1 }) {\n  let params = {\n    page: page,\n  };\n\n  try {\n    const response = await axios.get('trending/movie/day', { params, signal });\n    if (response.data.results.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return [];\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n"],"names":["Image","styled","ImageWrap","p","theme","colors","bgMain","radii","textBlock","space","STATUS","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","controller","AbortController","signal","getMovieCast","id","castInfo","toast","message","getCast","abort","Box","borderRadius","backgroundColor","padding","Loader","length","display","gridTemplateColumns","gridGap","maxWidth","as","map","profile_path","name","character","src","alt","axios","response","Error","data","request","getMovieDetails","getMovies","page","search","params","query","results","getReviews","getTrendingMovies","BASE_URL","API_TOKEN"],"sourceRoot":""}